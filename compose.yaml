# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesomwhen i run the command on the container it works but when i run the command with the docker compose command it didn't worke-compose
services:
  api:
    build: .
    command: uvicorn main:app --host 0.0.0.0 --reload
    env_file:
      - .env
    ports:
      - 8000:8000
    volumes:
      - ./alembic/:/app/alembic/
      - ./alembic.ini:/app/alembic.in
      - ./scripts/:/app/scripts/
    develop:
      watch:
        - action: sync+restart
          path: ./app
          target: ./app/app
        - action: rebuild
          path: ./requirements.txt
          target: ./app/requirements.txt
        - action: sync+restart
          path: ./main.py
          target: ./app/main.py
    environment:
      POSTGRES_HOST: db
    depends_on:
      db:
        condition: service_healthy
  
  db:
    image: postgres
    env_file:
      - .env
    restart: always
    user: postgres

    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "1234:5432"
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - db-data:/var/lib/postgresql/data

  redis-db:
    image: redis:latest
    ports:
      - "6555:6379"
    volumes:
      - redis_data:/data

volumes:
  db-data:
  redis_data:
